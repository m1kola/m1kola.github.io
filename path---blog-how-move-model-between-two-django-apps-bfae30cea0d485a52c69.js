webpackJsonp([56542547228532],{509:function(n,a){n.exports={data:{site:{siteMetadata:{siteUrl:"https://mikola.by"}},markdownRemark:{id:"/Users/m1kola/Projects/mikola_by/src/pages/blog/how-move-model-between-two-django-apps/index.md absPath of file >>> MarkdownRemark",html:'<h3>Warning</h3>\n<p>Do not perform any operations on a production database, test everyting on a dump first.</p>\n<h3>The wrong way</h3>\n<p>If you have a Django app (I’ll call it <strong>app1</strong>, in my example) with a lot of models and if you want to move some of these models into a separate app (will be <strong>app2</strong>) you can’t just cut a model definition from the <strong>app1</strong>, paste it into a new application and then run the <strong>makemigrations</strong> command. Django will simply remove your table and will create a new one. As a result of these operations, you’ll lose your data.</p>\n<h4>Why does it happen?</h4>\n<p>Whenever you run the <strong>makemigrations</strong> command, Django applies all migrations internally to build a project state, then compares the state to the state presented in your code. All the differences will be written in new migration files.</p>\n<p>Django manages migrations on a per-app basis and it “thinks” that one model has been removed from <strong>app1</strong> and a new one has been added to <strong>app2</strong>.</p>\n<p>So your cut-and-paste operation will lead to the same result as the following operations:</p>\n<ol>\n<li>Remove your model definition from <strong>app1</strong>;</li>\n<li>Run the <strong>makemigrations</strong> command <em>(here Django will generate a migration that removes your data)</em>;</li>\n<li>Add your model definition to <strong>app2</strong>;</li>\n<li>Run the <strong>makemigrations</strong> command again.</li>\n</ol>\n<h3>The right way</h3>\n<p>It will be easier to explain the solution with an example. In my <strong>app1</strong> application I have the following <strong>models.py</strong>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>contenttypes<span class="token punctuation">.</span>models <span class="token keyword">import</span> ContentType\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models\n\n\n<span class="token keyword">def</span> <span class="token function">get_default_page_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> ContentType<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_for_model<span class="token punctuation">(</span>DefaultContentType<span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">DefaultContentType</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">ModelWithContentType</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    content_type <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>\n        <span class="token string">\'contenttypes.ContentType\'</span><span class="token punctuation">,</span>\n        related_name<span class="token operator">=</span><span class="token string">\'+\'</span><span class="token punctuation">,</span>\n        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET<span class="token punctuation">(</span>get_default_page_content_type<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">RelatedModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    relation <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>\n        <span class="token string">\'app1.ModelThatShouldBeMoved\'</span><span class="token punctuation">,</span>\n        related_name<span class="token operator">=</span><span class="token string">\'relations\'</span><span class="token punctuation">,</span>\n        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE\n    <span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">ModelThatShouldBeMoved</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>As you may notice from the names of models, I want to move the <strong>ModelThatShouldBeMoved</strong> model into <strong>app2</strong>. This model is related to the <strong>RelatedModel</strong> model which will stay in <strong>app1.</strong> Also we have an indirect reference (through the <strong>ModelWithContentType.content_type</strong> field) from <strong>ModelWithContentType</strong>. And we need to keep all these direct and indirect relations!</p>\n<p>You can create a test data set using the following snippet (run <strong>python manage.py shell</strong> and insert the code):</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>contenttypes<span class="token punctuation">.</span>models <span class="token keyword">import</span> ContentType\n\n<span class="token keyword">from</span> app1<span class="token punctuation">.</span>models <span class="token keyword">import</span> ModelWithContentType<span class="token punctuation">,</span> ModelThatShouldBeMoved<span class="token punctuation">,</span> RelatedModel\n\n<span class="token comment"># We need to keep the same content type id for ModelThatShouldBeMoved</span>\ncontent_type <span class="token operator">=</span> ContentType<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_for_model<span class="token punctuation">(</span>ModelThatShouldBeMoved<span class="token punctuation">)</span>\nModelWithContentType<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>content_type<span class="token operator">=</span>content_type<span class="token punctuation">)</span>\n\n<span class="token comment"># We need to keep relations with other objects</span>\ntest_entry <span class="token operator">=</span> ModelThatShouldBeMoved<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">\'Test entry\'</span><span class="token punctuation">)</span>\nrelation <span class="token operator">=</span> RelatedModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>relation<span class="token operator">=</span>test_entry<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>As a result, you will have the following entries in the database:</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">django_migration_test<span class="token operator">=</span><span class="token comment"># select * from app1_modelthatshouldbemoved;</span>\n <span class="token function">id</span> <span class="token operator">|</span>   title\n----+------------\n  1 <span class="token operator">|</span> Test entry\n<span class="token punctuation">(</span>1 row<span class="token punctuation">)</span>\n\ndjango_migration_test<span class="token operator">=</span><span class="token comment"># select * from app1_relatedmodel;</span>\n <span class="token function">id</span> <span class="token operator">|</span> relation_id\n----+-------------\n  1 <span class="token operator">|</span>           1\n<span class="token punctuation">(</span>1 row<span class="token punctuation">)</span>\n\ndjango_migration_test<span class="token operator">=</span><span class="token comment"># select * from app1_modelwithcontenttype;</span>\n <span class="token function">id</span> <span class="token operator">|</span> content_type_id\n----+-----------------\n  1 <span class="token operator">|</span>               8\n<span class="token punctuation">(</span>1 row<span class="token punctuation">)</span>\n\ndjango_migration_test<span class="token operator">=</span><span class="token comment"># select * from django_content_type where app_label in (\'app1\', \'app2\');</span>\n <span class="token function">id</span> <span class="token operator">|</span> app_label <span class="token operator">|</span>         model\n----+-----------+------------------------\n  7 <span class="token operator">|</span> app1      <span class="token operator">|</span> defaultcontenttype\n  8 <span class="token operator">|</span> app1      <span class="token operator">|</span> modelthatshouldbemoved\n  9 <span class="token operator">|</span> app1      <span class="token operator">|</span> relatedmodel\n 10 <span class="token operator">|</span> app1      <span class="token operator">|</span> modelwithcontenttype\n<span class="token punctuation">(</span>4 rows<span class="token punctuation">)</span></code></pre>\n      </div>\n<h4>TL;DR;</h4>\n<p>If you are familiar with Django migrations, here is the list of steps to get the job done:</p>\n<ol>\n<li>Create a migration in <strong>app1</strong> which will rename a table in the database for <strong>ModelThatShouldBeMoved</strong>. This migration should change only the database, not the project state;</li>\n<li>Create a migration in <strong>app2</strong> which will add a model to the state and will update content types in the database. I’ll also rename the <strong>ModelThatShouldBeMoved</strong> model to <strong>ModelThatWasMoved</strong> in my example;</li>\n<li>Create migrations in <strong>all the apps</strong> that have relations with the model that you want to move. Migrations should change relations in the state;</li>\n<li>Create a migration that removes the <strong>ModelThatShouldBeMoved</strong> model from the state;</li>\n<li>Update your code.</li>\n</ol>\n<p>Some migrations will use the <a href="https://docs.djangoproject.com/en/1.10/ref/migration-operations/#separatedatabaseandstate">SeparateDatabaseAndState</a> operation<strong>.</strong></p>\n<h4>Step 1</h4>\n<p>First, I need to rename a table in the database for the <strong>ModelThatShouldBeMoved</strong> model.</p>\n<p>This step isn’t necessary, if you specified the <a href="https://docs.djangoproject.com/en/1.10/ref/models/options/#db-table">Meta.db_table</a> attribute in your model before. By default, Django generates a table name using an app label and a model’s class name, with an underscore between them (<a href="https://docs.djangoproject.com/en/1.10/ref/models/options/#table-names">see the docs</a> for details). If you don’t care about the table name, you can simply add the <strong>Meta.db_table</strong> attribute to your model and generate a new migration automatically.</p>\n<p>In my case I have a table with a name <strong>app1_modelthatshouldbemoved</strong>. I want to rename the <strong>ModelThatShouldBeMoved</strong> model to <strong>ModelThatWasMoved</strong> and put it into the <strong>app2</strong>, so I need the name to be <strong>app2_modelthatwasmoved</strong> to match Django’s naming convention.</p>\n<p>Here is the migration for my case (<strong>0002<em>rename</em>table.py</strong> in the <strong>app1</strong> app):</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> migrations\n\n\n<span class="token keyword">class</span> <span class="token class-name">Migration</span><span class="token punctuation">(</span>migrations<span class="token punctuation">.</span>Migration<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    dependencies <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token comment"># This migration should depend on the previous migration in our app</span>\n        <span class="token punctuation">(</span><span class="token string">\'app1\'</span><span class="token punctuation">,</span> <span class="token string">\'0001_initial\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>AlterModelTable<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">\'ModelThatShouldBeMoved\'</span><span class="token punctuation">,</span> table<span class="token operator">=</span><span class="token string">\'app2_modelthatwasmoved\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span></code></pre>\n      </div>\n<h4>Step 2</h4>\n<p>Now I need to add a migration that creates a model in the state for <strong>app2</strong> and updates content types in the database.</p>\n<p>I’ve called my migration <strong>0001<em>move</em>a<em>model</em>and_rename.py</strong>, because it’s the first migration in my <strong>app2</strong>. In your case it may be a migration with a different number. Also you will probably need to specify the previous migration in your app as a dependency.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> unicode_literals\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> migrations<span class="token punctuation">,</span> models\n\n\n<span class="token keyword">def</span> <span class="token function">update_contentypes</span><span class="token punctuation">(</span>apps<span class="token punctuation">,</span> schema_editor<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""\n    Updates content types.\n    We want to have the same content type id, when the model is moved and renamed.\n    """</span>\n    ContentType <span class="token operator">=</span> apps<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token string">\'contenttypes\'</span><span class="token punctuation">,</span> <span class="token string">\'ContentType\'</span><span class="token punctuation">)</span>\n    db_alias <span class="token operator">=</span> schema_editor<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>alias\n\n    <span class="token comment"># Move the ModelThatShouldBeMoved model to app2 and rename to ModelThatWasMoved</span>\n    qs <span class="token operator">=</span> ContentType<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>using<span class="token punctuation">(</span>db_alias<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>app_label<span class="token operator">=</span><span class="token string">\'app1\'</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">\'modelthatshouldbemoved\'</span><span class="token punctuation">)</span>\n    qs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>app_label<span class="token operator">=</span><span class="token string">\'app2\'</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">\'modelthatwasmoved\'</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">def</span> <span class="token function">update_contentypes_reverse</span><span class="token punctuation">(</span>apps<span class="token punctuation">,</span> schema_editor<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">"""\n    Reverts changes in content types.\n    """</span>\n    ContentType <span class="token operator">=</span> apps<span class="token punctuation">.</span>get_model<span class="token punctuation">(</span><span class="token string">\'contenttypes\'</span><span class="token punctuation">,</span> <span class="token string">\'ContentType\'</span><span class="token punctuation">)</span>\n    db_alias <span class="token operator">=</span> schema_editor<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>alias\n\n    <span class="token comment"># Move the ModelThatWasMoved model to app1 and rename to ModelThatShouldBeMoved</span>\n    qs <span class="token operator">=</span> ContentType<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>using<span class="token punctuation">(</span>db_alias<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>app_label<span class="token operator">=</span><span class="token string">\'app2\'</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">\'modelthatwasmoved\'</span><span class="token punctuation">)</span>\n    qs<span class="token punctuation">.</span>update<span class="token punctuation">(</span>app_label<span class="token operator">=</span><span class="token string">\'app1\'</span><span class="token punctuation">,</span> model<span class="token operator">=</span><span class="token string">\'modelthatshouldbemoved\'</span><span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">Migration</span><span class="token punctuation">(</span>migrations<span class="token punctuation">.</span>Migration<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    dependencies <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token comment"># We need to run 0002_rename_table form app1 first,</span>\n        <span class="token comment"># because it changes the table of ModelThatShouldBeMoved.</span>\n        <span class="token comment"># Only after that we will update content types and rename the model.</span>\n        <span class="token punctuation">(</span><span class="token string">\'app1\'</span><span class="token punctuation">,</span> <span class="token string">\'0002_rename_table\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment"># This migration also depends on the contenttype app,</span>\n        <span class="token comment"># so we need to specify dependency on 0002_remove_content_type_name.</span>\n        <span class="token comment"># If you use Django &lt; 1.8, you will probably need to specify 0001_initial.</span>\n        <span class="token punctuation">(</span><span class="token string">\'contenttypes\'</span><span class="token punctuation">,</span> <span class="token string">\'0002_remove_content_type_name\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    state_operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>CreateModel<span class="token punctuation">(</span>\n            name<span class="token operator">=</span><span class="token string">\'ModelThatShouldBeMoved\'</span><span class="token punctuation">,</span>\n            fields<span class="token operator">=</span><span class="token punctuation">[</span>\n                <span class="token punctuation">(</span><span class="token string">\'id\'</span><span class="token punctuation">,</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>auto_created<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> serialize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">\'ID\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token punctuation">(</span><span class="token string">\'title\'</span><span class="token punctuation">,</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        migrations<span class="token punctuation">.</span>RenameModel<span class="token punctuation">(</span>\n            old_name<span class="token operator">=</span><span class="token string">\'ModelThatShouldBeMoved\'</span><span class="token punctuation">,</span>\n            new_name<span class="token operator">=</span><span class="token string">\'ModelThatWasMoved\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    database_operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>RunPython<span class="token punctuation">(</span>update_contentypes<span class="token punctuation">,</span> update_contentypes_reverse<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>SeparateDatabaseAndState<span class="token punctuation">(</span>\n            state_operations<span class="token operator">=</span>state_operations<span class="token punctuation">,</span>\n            database_operations<span class="token operator">=</span>database_operations\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span></code></pre>\n      </div>\n<p>Note that the <strong>CreateModel</strong> operation should reflect your model definition. Otherwise you may lose your data.</p>\n<p>As an alternative to the <strong>CreateModel</strong> operation, you can copy and paste all the operations related to your model since the first migration (usually <strong>0001_initial</strong>) in your application.</p>\n<p>Note also that if you do not need to rename your model, you need to remove the <strong>RenameModel</strong> operation and remove the <strong>model</strong> argument from the <strong>update</strong> calls in the <strong>update_contentypes</strong> and <strong>update<em>contentypes</em>reverse</strong> functions.</p>\n<h4>Step 3</h4>\n<p>I need to create migrations for <strong>all the apps that have models which have relations with the model that I want to move</strong>.</p>\n<p>In my example, I have only one app that contains only one field which refers the old <strong>ModelThatShouldBeMoved</strong> model. My migration (<strong>0003<em>update</em>relations.py</strong> in <strong>app1</strong>):</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> migrations<span class="token punctuation">,</span> models\n<span class="token keyword">import</span> django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>deletion\n\n\n<span class="token keyword">class</span> <span class="token class-name">Migration</span><span class="token punctuation">(</span>migrations<span class="token punctuation">.</span>Migration<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    dependencies <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token comment"># The previous migration in app1</span>\n        <span class="token punctuation">(</span><span class="token string">\'app1\'</span><span class="token punctuation">,</span> <span class="token string">\'0002_rename_table\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token comment"># This migration should depend on the migration that creates a model in the state of app2,</span>\n        <span class="token comment"># because we are going to refer a new model here.</span>\n        <span class="token punctuation">(</span><span class="token string">\'app2\'</span><span class="token punctuation">,</span> <span class="token string">\'0001_move_a_model_and_rename\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    state_operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>AlterField<span class="token punctuation">(</span>\n            model_name<span class="token operator">=</span><span class="token string">\'relatedmodel\'</span><span class="token punctuation">,</span>\n            name<span class="token operator">=</span><span class="token string">\'relation\'</span><span class="token punctuation">,</span>\n            field<span class="token operator">=</span>models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>on_delete<span class="token operator">=</span>django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>deletion<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">\'relations\'</span><span class="token punctuation">,</span>\n                                    to<span class="token operator">=</span><span class="token string">\'app2.ModelThatWasMoved\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>SeparateDatabaseAndState<span class="token punctuation">(</span>state_operations<span class="token operator">=</span>state_operations<span class="token punctuation">)</span>\n    <span class="token punctuation">]</span></code></pre>\n      </div>\n<p>Note that the <strong>AlterField</strong> operation should contain the same field definition as your model. The only difference is reference to your model. So this definition:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>on_delete<span class="token operator">=</span>django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>deletion<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">\'relations\'</span><span class="token punctuation">,</span>\n                                    to<span class="token operator">=</span><span class="token string">\'app1.ModelThatShouldBeMoved\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>should be replaced with this one, in my case:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python">models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>on_delete<span class="token operator">=</span>django<span class="token punctuation">.</span>db<span class="token punctuation">.</span>models<span class="token punctuation">.</span>deletion<span class="token punctuation">.</span>CASCADE<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">\'relations\'</span><span class="token punctuation">,</span>\n                                    to<span class="token operator">=</span><span class="token string">\'app2.ModelThatWasMoved\'</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h4>Step 4</h4>\n<p>The last migration simply removes the model from the state of <strong>app1</strong> (<strong>0004<em>delete</em>old<em>model</em>from<em>the</em>state.py</strong>):</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> unicode_literals\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> migrations\n\n\n<span class="token keyword">class</span> <span class="token class-name">Migration</span><span class="token punctuation">(</span>migrations<span class="token punctuation">.</span>Migration<span class="token punctuation">)</span><span class="token punctuation">:</span>\n\n    dependencies <span class="token operator">=</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">(</span><span class="token string">\'app1\'</span><span class="token punctuation">,</span> <span class="token string">\'0003_update_relations\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    state_operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>DeleteModel<span class="token punctuation">(</span><span class="token string">\'ModelThatShouldBeMoved\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n\n    operations <span class="token operator">=</span> <span class="token punctuation">[</span>\n        migrations<span class="token punctuation">.</span>SeparateDatabaseAndState<span class="token punctuation">(</span>state_operations<span class="token operator">=</span>state_operations<span class="token punctuation">)</span>\n    <span class="token punctuation">]</span></code></pre>\n      </div>\n<h4>Step 5</h4>\n<h4></h4>\n<p>On the final step I just need to update my code:</p>\n<ol>\n<li>Move the model definition into a new app (<strong>app2</strong>, in my case);</li>\n<li>Update imports;</li>\n<li>Update relations (see the <strong>RelatedModel.relation</strong> definition, for example).</li>\n</ol>\n<p>My <strong>models.py</strong> from <strong>app1</strong>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>contenttypes<span class="token punctuation">.</span>models <span class="token keyword">import</span> ContentType\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models\n\n\n<span class="token keyword">def</span> <span class="token function">get_default_page_content_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> ContentType<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get_for_model<span class="token punctuation">(</span>DefaultContentType<span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">DefaultContentType</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">pass</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">ModelWithContentType</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    content_type <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>\n        <span class="token string">\'contenttypes.ContentType\'</span><span class="token punctuation">,</span>\n        related_name<span class="token operator">=</span><span class="token string">\'+\'</span><span class="token punctuation">,</span>\n        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET<span class="token punctuation">(</span>get_default_page_content_type<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n\n\n<span class="token keyword">class</span> <span class="token class-name">RelatedModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    relation <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>\n        <span class="token string">\'app2.ModelThatWasMoved\'</span><span class="token punctuation">,</span>\n        related_name<span class="token operator">=</span><span class="token string">\'relations\'</span><span class="token punctuation">,</span>\n        on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>CASCADE\n    <span class="token punctuation">)</span></code></pre>\n      </div>\n<p>And <strong>models.py</strong> from <strong>app2</strong>:</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models\n\n\n<span class="token keyword">class</span> <span class="token class-name">ModelThatWasMoved</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<h4>Testing</h4>\n<p>To test changes you can run the <strong>python **</strong>manage.py makemigrations —dry-run** command. This command will try to generate migrations without actually writing them to a disk.</p>\n<p><strong>Expected result:</strong></p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">No changes detected</code></pre>\n      </div>\n<p>You can also try to run the same SQL queries as shown before (but with a new table name):</p>\n<div class="gatsby-highlight">\n      <pre class="language-bash"><code class="language-bash">django_migration_test<span class="token operator">=</span><span class="token comment"># select * from app2_modelthatwasmoved;</span>\n <span class="token function">id</span> <span class="token operator">|</span>   title\n----+------------\n  1 <span class="token operator">|</span> Test entry\n<span class="token punctuation">(</span>1 row<span class="token punctuation">)</span>\n\ndjango_migration_test<span class="token operator">=</span><span class="token comment"># select * from app1_relatedmodel;</span>\n <span class="token function">id</span> <span class="token operator">|</span> relation_id\n----+-------------\n  1 <span class="token operator">|</span>           1\n<span class="token punctuation">(</span>1 row<span class="token punctuation">)</span>\n\ndjango_migration_test<span class="token operator">=</span><span class="token comment"># select * from app1_modelwithcontenttype;</span>\n <span class="token function">id</span> <span class="token operator">|</span> content_type_id\n----+-----------------\n  1 <span class="token operator">|</span>               8\n<span class="token punctuation">(</span>1 row<span class="token punctuation">)</span>\n\ndjango_migration_test<span class="token operator">=</span><span class="token comment"># select * from django_content_type where app_label in (\'app1\', \'app2\');</span>\n <span class="token function">id</span> <span class="token operator">|</span> app_label <span class="token operator">|</span>        model\n----+-----------+----------------------\n  7 <span class="token operator">|</span> app1      <span class="token operator">|</span> defaultcontenttype\n  9 <span class="token operator">|</span> app1      <span class="token operator">|</span> relatedmodel\n 10 <span class="token operator">|</span> app1      <span class="token operator">|</span> modelwithcontenttype\n  8 <span class="token operator">|</span> app2      <span class="token operator">|</span> modelthatwasmoved\n<span class="token punctuation">(</span>4 rows<span class="token punctuation">)</span></code></pre>\n      </div>\n<p><strong>Expected result:</strong></p>\n<p>Data should be the same as before except the <strong>django<em>content</em>type</strong> table. This table should contain a new <strong>app_label</strong> and a new <strong>model</strong> name, but the same id (see the entry with <strong>id=8</strong>) for the model that has been moved.</p>',
frontmatter:{title:"How to move a model between two Django apps",subtitle:"And save references with content types and other entries",date:"Sep 25, 2016",shareImage:{childImageSharp:{resize:{width:800,height:364,src:"/static/django-logo-negative-1d528e2cb5fbc29ad16c74e5d883c371-f6604.png"}}}}}},pathContext:{slug:"/blog/how-move-model-between-two-django-apps/",previous:{fields:{slug:"/blog/hello-world/"},frontmatter:{title:"Hello, World!"}},next:null}}}});
//# sourceMappingURL=path---blog-how-move-model-between-two-django-apps-bfae30cea0d485a52c69.js.map